cmake_minimum_required(VERSION 2.8)
project(NEWHELLO)
add_subdirectory(src)
message(STATUS "CMAKE_BINARY_DIR:" ${CMAKE_BINARY_DIR})
message(STATUS "CMAKE_CURRENT_BINARY_DIR:" ${CMAKE_CURRENT_BINARY_DIR})
message(STATUS "CMAKE_CURRENT_LIST_FILE:" ${CMAKE_CURRENT_LIST_FILE})
message(STATUS "CMAKE_CURRENT_LIST_LINE:" ${CMAKE_CURRENT_LIST_LINE})
message(STATUS "PROJECT_NAME" ${PROJECT_NAME})
message(STATUS "HOME dir:" $ENV{HOME})
message(STATUS "CMAKE_VERSION: " ${CMAKE_MAJOR_VERSION} "." ${CMAKE_MINOR_VERSION} "." ${CMAKE_PATCH_VERSION})
message(STATUS "CMAKE_SYSTEM: " ${CMAKE_SYSTEM})
message(STATUS "CMAKE_SYSTEM_NAME: " ${CMAKE_SYSTEM_NAME})
message(STATUS "CMAKE_SYSTEM_VERSION: " ${CMAKE_SYSTEM_VERSION})
message(STATUS "CMAKE_SYSTEM_PROCESSOR: " ${CMAKE_SYSTEM_PROCESSOR})
message(STATUS "UNIX: " ${UNIX})
message(STATUS "WIN32: " ${WIN32})


exec_program(ls ARGS "*.txt" OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)
if(NOT LS_RVALUE)
message(STATUS "ls result: " ${LS_OUTPUT})
endif(NOT LS_RVALUE)

find_library(libX X11 /usr/lib)
if(libX)
message(STATUS "libX found")
endif(libX)

if("hello" MATCHES "ell")
message("true")
endif("hello" MATCHES "ell")

set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)
if(WIN32)
message(STATUS "This is windows.")
elseif(UNIX)
message(STATUS "This is unix.")
elseif(APPLE)
message(STATUS "This is apple.")
endif(WIN32)

set(SRC_LIST main.c hello.c lx.c)
aux_source_directory(. SRC_LIST)
foreach(F ${SRC_LIST})
message(${F})
endforeach(F)

foreach(VAR RANGE 10)
message(${VAR})
endforeach(VAR)

foreach(VAR RANGE 1 10 2)
message(${VAR})
endforeach(VAR)
